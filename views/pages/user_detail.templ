package pages

import (
	"fmt"
	"github.com/jaredfolkins/letemcook/models"
	"github.com/jaredfolkins/letemcook/views/layout"
	"strconv"
)

// Helper function to render boolean values as Yes/No
func boolToYesNo(b bool) string {
	if b {
		return "Yes"
	}
	return "No"
}

// SVG Icons for boolean representation
templ checkIcon() {
	<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6 text-success">
		<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5"/>
	</svg>
}

templ xIcon() {
	<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6 text-error">
		<path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"/>
	</svg>
}

templ UserDetailPage(v models.UserDetailView) {
	@layout.Base(v.BaseView) {
		<div class="cookbooknav-attrs flex flex-col justify-end md:flex-row mx-12 mb-2">
			<div class="flex-1 flex items-center justify-start">
				<h1 class="text-2xl font-bold">User Details: { v.User.Username }</h1>
			</div>
		</div>

		<div id="user-detail-content-box" class="bg-base-100 p-9 edges gap-12 mx-12 my-4 flex flex-col">
			<div class="flex flex-col md:flex-row gap-12">

				<div class="md:w-1/3">
					<h2 class="text-xl font-semibold mb-4">Information</h2>
					<div class="space-y-2">
						<p><strong>ID:</strong> { fmt.Sprintf("%d", v.User.ID) }</p>
						<p><strong>Username:</strong> { v.User.Username }</p>
						<p><strong>Email:</strong> { v.User.Email }</p>
						<p><strong>Account Name:</strong> { v.User.Account.Name }</p>
						<p><strong>Account ID:</strong> { fmt.Sprintf("%d", v.User.Account.ID) }</p>
						<p><strong>Joined:</strong> { v.User.Created.Format("Jan 02, 2006") }</p>
					</div>
				</div>
			</div>

			<div class="divider"></div>
					<!-- Account Permissions Section -->
					<div>
						<h2 class="text-xl font-semibold mb-4">Account Permissions ({ strconv.Itoa(len(v.Permissions.Accounts)) })</h2>
						if len(v.Permissions.Accounts) == 0 {
							<p>No account permissions found.</p>
						} else {
							<div class="overflow-x-auto">
								<table class="table w-full">
									<thead>
										<tr>
											<th>Account</th>
											<th class="text-center">Create Apps</th>
											<th class="text-center">View Apps</th>
											<th class="text-center">Create Cookbooks</th>
											<th class="text-center">View Cookbooks</th>
											<th class="text-center">Administer</th>
											<th class="text-center">Is Owner</th>
										</tr>
									</thead>
									<tbody>
										for _, accPerm := range v.Permissions.Accounts {
											<tr>
												<td class="text-lg">{ accPerm.AccountName } (ID: { fmt.Sprintf("%d", accPerm.AccountID) })</td>
												<td><div class="flex justify-center"><input type="checkbox" name="can_create_apps" class="toggle toggle-sm toggle-primary" checked?={ accPerm.CanCreateapps } hx-put={ string(templ.URL(fmt.Sprintf("/lemc/user/%d/account/%d/permission/can_create_apps", v.User.ID, accPerm.AccountID))) } hx-trigger="change"/></div></td>
												<td><div class="flex justify-center"><input type="checkbox" name="can_view_apps" class="toggle toggle-sm toggle-primary" checked?={ accPerm.CanViewapps } hx-put={ string(templ.URL(fmt.Sprintf("/lemc/user/%d/account/%d/permission/can_view_apps", v.User.ID, accPerm.AccountID))) } hx-trigger="change"/></div></td>
												<td><div class="flex justify-center"><input type="checkbox" name="can_create_cookbooks" class="toggle toggle-sm toggle-primary" checked?={ accPerm.CanCreateCookbooks } hx-put={ string(templ.URL(fmt.Sprintf("/lemc/user/%d/account/%d/permission/can_create_cookbooks", v.User.ID, accPerm.AccountID))) } hx-trigger="change"/></div></td>
												<td><div class="flex justify-center"><input type="checkbox" name="can_view_cookbooks" class="toggle toggle-sm toggle-primary" checked?={ accPerm.CanViewCookbooks } hx-put={ string(templ.URL(fmt.Sprintf("/lemc/user/%d/account/%d/permission/can_view_cookbooks", v.User.ID, accPerm.AccountID))) } hx-trigger="change"/></div></td>
												<td><div class="flex justify-center"><input type="checkbox" name="can_administer" class="toggle toggle-sm toggle-primary" checked?={ accPerm.CanAdminister } hx-put={ string(templ.URL(fmt.Sprintf("/lemc/user/%d/account/%d/permission/can_administer", v.User.ID, accPerm.AccountID))) } hx-trigger="change"/></div></td>
												<td><div class="flex justify-center"><input type="checkbox" name="is_owner" class="toggle toggle-sm toggle-primary" checked?={ accPerm.IsOwner } hx-put={ string(templ.URL(fmt.Sprintf("/lemc/user/%d/account/%d/permission/is_owner", v.User.ID, accPerm.AccountID))) } hx-trigger="change"/></div></td>
											</tr>
										}
									</tbody>
								</table>
							</div>
						}
					</div>

			<div class="divider"></div>
			<!-- Cookbook Permissions Section -->
			<div>
				<h2 class="text-xl font-semibold mb-4">Cookbook Permissions ({ strconv.Itoa(len(v.Permissions.Cookbooks)) })</h2>
				if len(v.Permissions.Cookbooks) == 0 {
					<p>No specific cookbook permissions found.</p>
				} else {
					<div class="overflow-x-auto">
						<table class="table w-full">
							<thead>
								<tr>
									<th>Cookbook</th>
									<th class="text-center">Can View</th>
									<th class="text-center">Can Edit</th>
									<th class="text-center">Is Owner</th>
								</tr>
							</thead>
							<tbody>
								for _, cbPerm := range v.Permissions.Cookbooks {
									<tr>
										<td>
											<a href={ templ.URL(fmt.Sprintf("/lemc/cookbook/edit/individual/%s", cbPerm.CookbookUUID)) } class="rounded-none text-lg btn">
												{ cbPerm.CookbookName } (ID: { fmt.Sprintf("%d", cbPerm.CookbookID) })
											</a>
										</td>
										<td><div class="flex justify-center">
											if cbPerm.CanView {
												@checkIcon()
											} else {
												@xIcon()
											}
										</div></td>
										<td><div class="flex justify-center">
											if cbPerm.CanEdit {
												@checkIcon()
											} else {
												@xIcon()
											}
										</div></td>
										<td><div class="flex justify-center">
											if cbPerm.IsOwner {
												@checkIcon()
											} else {
												@xIcon()
											}
										</div></td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				}
			</div>

			<div class="divider"></div>

			<!-- App Permissions Section -->
			<div>
				<h2 class="text-xl font-semibold mb-4">App Permissions ({ strconv.Itoa(len(v.Permissions.Apps)) })</h2>
				if len(v.Permissions.Apps) == 0 {
					<p>No specific app permissions found.</p>
				} else {
					<div class="overflow-x-auto">
						<table class="table w-full">
							<thead>
								<tr>
									<th>App</th>
									<th>Cookbook</th>
									<th class="text-center">Can Shared</th>
									<th class="text-center">Can Individual</th>
									<th class="text-center">Can Admin</th>
									<th class="text-center">Is Owner</th>
								</tr>
							</thead>
							<tbody>
								for _, appPerm := range v.Permissions.Apps {
									<tr>
										<td>
											<a href={ templ.URL(fmt.Sprintf("/lemc/app/index/a/%s/%s", "acls", appPerm.AppUUID)) } class="rounded-none text-lg btn">
												{ appPerm.AppName } (ID: { fmt.Sprintf("%d", appPerm.AppID) })
											</a>
										</td>
										<td>
											<a href={ templ.URL(fmt.Sprintf("/lemc/cookbook/edit/individual/%s", appPerm.CookbookUUID)) } class="rounded-none text-lg btn">
												{ appPerm.CookbookName } (ID: { fmt.Sprintf("%d", appPerm.CookbookID) })
											</a>
										</td>
										<td><div class="flex justify-center">
											if appPerm.CanShared {
												@checkIcon()
											} else {
												@xIcon()
											}
										</div></td>
										<td><div class="flex justify-center">
											if appPerm.CanIndividual {
												@checkIcon()
											} else {
												@xIcon()
											}
										</div></td>
										<td><div class="flex justify-center">
											if appPerm.CanAdminister {
												@checkIcon()
											} else {
												@xIcon()
											}
										</div></td>
										<td><div class="flex justify-center">
											if appPerm.IsOwner {
												@checkIcon()
											} else {
												@xIcon()
											}
										</div></td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				}
			</div>
		</div>
	}
}

