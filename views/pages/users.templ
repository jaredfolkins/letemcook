package pages

import (
"fmt"
"strconv"

"github.com/jaredfolkins/letemcook/models"
"github.com/jaredfolkins/letemcook/paths"
"github.com/jaredfolkins/letemcook/views/layout"
)

templ UsersPage(v models.UsersView) {
	<div id="usersnav" class="cookbooknav-attrs flex flex-col justify-end md:flex-row mx-12 mb-2">
		<div class="flex-1 flex items-center justify-start">
			<h1 class="text-2xl font-bold">Users</h1>
		</div>
		<div class="flex flex-row gap-12 justify-end">
			<div>
				if v.BaseView.UserContext.ActingAs.CanAdministerAccount() {
					<button class="btn btn-primary rounded-none" onclick="new_user.showModal()">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15"></path>
						</svg>
					</button>
				}
				<dialog id="new_user" class="modal overscroll-none">
					<div class="p-12 overscroll-none">
						<form
							id="new-user-form"
							hx-target="#user-list-container"
							hx-swap="innerHTML"
							hx-headers="js:{'X-TimeZone': Intl.DateTimeFormat().resolvedOptions().timeZone}"
                                                       hx-post={ paths.AccountUserCreate }
							class="drop-shadow-xl flex flex-col gap-4 p-12 bg-base-100 rounded-none"
						>
							<label class="flex flex-col justify-start gap-2 rounded-none">
								Username:
								<input
									class="input input-bordered bg-white input-primary rounded-none"
									type="text"
									name="username"
									required
								/>
							</label>
							<label class="flex flex-col justify-start gap-2 relative rounded-none">
								Email:
								<input
									class="input input-bordered bg-white input-primary rounded-none"
									type="email"
									name="email"
									required
								/>
							</label>
							<label class="flex flex-col justify-start gap-2 relative rounded-none">
								Password:
								<input
									class="input input-bordered bg-white input-primary rounded-none"
									type="password"
									name="password"
									required
								/>
							</label>
							<div class="card-actions justify-end">
								<button class="badge badge-primary rounded-none px-6 py-4 hover:scale-[1.1]">
									Create
								</button>
								<div class="btn btn-sm rounded-none btn-circle btn-ghost absolute left-2 top-2" onclick="new_user.close()">âœ•</div>
							</div>
						</form>
						<script>
							if (!window.newUserModalListenersAdded) {
								document.addEventListener('closeNewUserModal', function() {
									const modal = document.getElementById('new_user');
									if (modal) {
										modal.close();
									}
								});

								const userForm = document.getElementById('new-user-form');
								if (userForm) {
									userForm.addEventListener('htmx:afterRequest', function(event) {
										const successHeader = event.detail.xhr.getResponseHeader('X-Lemc-Flash-Success');
										if (event.detail.xhr.status >= 200 && event.detail.xhr.status < 300 && successHeader) {
											const modal = document.getElementById('new_user');
											if (modal) {
												modal.close();
												userForm.reset();
											}
										}
									});
									userForm.addEventListener('htmx:responseError', function(event) {
										console.error("Error creating user:", event.detail.error);
									});
								}
								window.newUserModalListenersAdded = true;
							}
						</script>
					</div>
					<div class="toast-alerts"></div>
				</dialog>
			</div>
		</div>
	</div>
	<div id="users-content-box" class="bg-base-100 p-9 edges gap-12 mx-12 my-4">
		@UsersPartial(v)
	</div>
}

templ UsersIndex(v models.UsersView, usersList templ.Component) {
	@layout.Base(v.BaseView) {
		@usersList
	}
}

// New component for partial updates
templ UsersPartial(v models.UsersView) {
	<div id="user-list-container" class="grid grid-cols-1 gap-12">
		if len(v.Users) == 0 {
			<p>No users found.</p>
		} else {
			<div class="overflow-x-auto">
				<table class="table w-full">
					<thead>
						<tr>
							<th>ID</th>
							<th>Username</th>
							<th>Email</th>
						</tr>
					</thead>
					<tbody>
						for _, user := range v.Users {
						<tr>
							<td>{ fmt.Sprintf("%d", user.ID) }</td>
							<td>
                                                               <a href={ templ.URL(fmt.Sprintf(paths.AccountUserPattern, user.ID)) } class="rounded-none text-lg btn">
									{ user.Username }
								</a>
							</td>
							<td>{ user.Email }</td>
						</tr>
						}
					</tbody>
				</table>
			</div>
		}
	</div>

	if v.TotalPages > 1 {
		<div class="flex justify-center items-center space-x-4 mt-8">
			if v.CurrentPage > 1 {
				<a
                                    href={ templ.URL(fmt.Sprintf(paths.AccountUsersPagePattern, v.CurrentPage-1, v.Limit)) }
                                    hx-get={ fmt.Sprintf(paths.AccountUsersPagePartialPattern, v.CurrentPage-1, v.Limit) }
                                    hx-target="#app"
                                    hx-swap="innerHTML transition:true scroll:top"
                                    hx-push-url={ fmt.Sprintf(paths.AccountUsersPagePattern, v.CurrentPage-1, v.Limit) }
					class="btn btn-sm btn-outline rounded-none" 
				>
					&lt;
				</a>
			} else {
				<button class="btn btn-sm btn-outline rounded-none" disabled>
					&lt;
				</button>
			}
			<span class="text-sm">
				Page { strconv.Itoa(v.CurrentPage) } of { strconv.Itoa(v.TotalPages) }
			</span>
			if v.CurrentPage < v.TotalPages {
				<a
                                    href={ templ.URL(fmt.Sprintf(paths.AccountUsersPagePattern, v.CurrentPage+1, v.Limit)) }
                                    hx-get={ fmt.Sprintf(paths.AccountUsersPagePartialPattern, v.CurrentPage+1, v.Limit) }
                                    hx-target="#app"
                                    hx-swap="innerHTML transition:true scroll:top"
                                    hx-push-url={ fmt.Sprintf(paths.AccountUsersPagePattern, v.CurrentPage+1, v.Limit) }
					class="btn btn-sm btn-outline rounded-none" 
				>
					&gt;
				</a>
			} else {
				<button class="btn btn-sm btn-outline rounded-none" disabled>
					&gt;
				</button>
			}
		</div>
	}
}