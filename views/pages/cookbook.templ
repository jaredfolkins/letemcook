package pages

import (
    "github.com/jaredfolkins/letemcook/views/layout"
    "github.com/jaredfolkins/letemcook/models"
    "github.com/jaredfolkins/letemcook/paths"
    "fmt"
    "gopkg.in/yaml.v3"
)

script eval(msg string) {
    eval(msg);
}

script uploadCookbookThumbnailScript(uploadUrl string) {
       document.getElementById('thumbnail-upload-form').addEventListener('change', function(event) {
          event.preventDefault();
          console.log('Form submission prevented');

          var form = document.getElementById('thumbnail-upload-form');
          var formData = new FormData(form);
          var uuid = form.getAttribute('data-uuid');
          var yaml_type = form.getAttribute('data-type');
          var url = uploadUrl.replace('%s', uuid);
          var xhr = new XMLHttpRequest();

          xhr.open('POST', url, true);

          xhr.upload.addEventListener('progress', function(event) {
              if (event.lengthComputable) {
                 document.getElementById('upload-progress').style.display = 'block';
                  var percentComplete = (event.loaded / event.total) * 100;
                  console.log('Upload progress:', percentComplete);
                  document.getElementById('upload-progress').value = percentComplete;

                  if (percentComplete == 100) {
                      document.getElementById('upload-progress').style.display = 'none';
                      document.getElementById('upload-progress').value = 0;

                        var imgElement = document.getElementById('lemc-cookbook-thumbnail');
                        setTimeout(function() {
                            imgElement.src = imgElement.src + '?t=' + new Date().getTime();;
                        }, 1000);
                  }
              }
          });

          xhr.addEventListener('load', function(event) {
              if (xhr.status == 200) {
                  console.log('Upload complete');
              } else {
                  console.error('Upload failed with status:', xhr.status);
              }
          });

          xhr.addEventListener('error', function(event) {
              console.error('Upload error:', event);
          });

          xhr.send(formData);
          console.log('XHR request sent');
      });
}

script uploadCookbookYamlScript(uploadUrlPattern string) {
    document.getElementById('file-upload-form-dropdown').addEventListener('change', function(event) {
        event.preventDefault();
        console.log('Form submission prevented');

        var form = document.getElementById('file-upload-form-dropdown');
        var formData = new FormData(form);
        var uuid = form.getAttribute('data-uuid');
        var yaml_type = form.getAttribute('data-type');
        var url = uploadUrlPattern.replace(/%s/g, function(match, offset) {
            return offset === uploadUrlPattern.indexOf('%s') ? yaml_type : uuid;
        });
        var xhr = new XMLHttpRequest();

        xhr.open('POST', url, true);

        xhr.upload.addEventListener('progress', function(event) {
            if (event.lengthComputable) {
            document.getElementById('upload-progress').style.display = 'block';
                var percentComplete = (event.loaded / event.total) * 100;
                console.log('Upload progress:', percentComplete);
                document.getElementById('upload-progress').value = percentComplete;

                if (percentComplete == 100) {
                    document.getElementById('upload-progress').style.display = 'none';
                    document.getElementById('upload-progress').value = 0;
                }
            }
        });

        xhr.addEventListener('load', function(event) {
            if (xhr.status == 200) {
                console.log('Upload complete');
                 htmx.trigger(document.body, 'refreshCookbook', {});
            } else {
                console.error('Upload failed with status:', xhr.status);
            }
        });

        xhr.addEventListener('error', function(event) {
            console.error('Upload error:', event);
        });

        xhr.send(formData);
        console.log('XHR request sent');
    });
}

templ renderYamlModal(v models.CoreView, action string) {
      <dialog id={ string(fmt.Sprintf("yaml_%s_modal", action)) } class="modal overscroll-none rounded-none">
        <div class="edit-box edges p-12 overscroll-none rounded-none">
            <button
                onclick={ eval(fmt.Sprintf("yaml_%s_modal.close()", action)) }
                class="btn btn-sm btn-circle btn-ghost absolute left-2 rounded-none top-2">
                    âœ•
            </button>

            <div class="yaml">
                <div class="h-full">
                    <div class="h-full">
                        <form class="yaml-text h-full">
                            <textarea
                                id={ string(fmt.Sprintf("config-%s-%s-%s", v.ViewType, action, v.YamlDefault.UUID)) }
                                name={ string(fmt.Sprintf("yaml-%s", action)) }
                                class="yaml-text h-full"
                                hx-post={ string(templ.URL(fmt.Sprintf(paths.CookbookConfigPattern, v.ViewType, action, v.YamlDefault.UUID))) }
                                hx-trigger="keyup delay:700ms changed"
                                hx-target="#cookbook"
                                hx-swap="innerHTML"
                                >
                                </textarea>
                        </form>
                    </div>
                </div>
            </div>

        </div>
        <div class="toast-alerts"></div>
      </dialog>
}


templ Cookbook(v models.CoreView) {
    <div class="mb-8">
        @RenderCookbookNav(v)
    </div>

    @CookbookDescription(v)
}

templ RenderCookbookSubHeaderAndNav(v models.CoreView) {
    <div class="cookbooknav-attrs flex flex-col justify-end md:flex-row mx-12 mb-2">
        <div class="flex-1 flex items-center justify-start">
            {{ var activeUser, activeAdmin string }}
            if v.ViewType == "individual" {
                {{ activeUser = "active-cookbook" }}
            } else if v.ViewType == "shared" {
                {{ activeAdmin = "active-cookbook" }}
            }


            <a
                hx-target="#app"
                hx-swap="innerHTML transition:true"
                hx-push-url={ fmt.Sprintf(paths.CookbookEditPattern, "individual", v.YamlDefault.UUID) }
                href={ templ.URL(fmt.Sprintf(paths.CookbookEditPartialPattern, "individual", v.YamlDefault.UUID)) }
                class={ fmt.Sprintf("rounded-none btn text-lg %s", activeUser) }>
                Individual
            </a>


            <a
                hx-target="#app"
                hx-swap="innerHTML transition:true"
                hx-push-url={ fmt.Sprintf(paths.CookbookEditPattern, "shared", v.YamlDefault.UUID) }
                href={ templ.URL(fmt.Sprintf(paths.CookbookEditPartialPattern, "shared", v.YamlDefault.UUID)) }
                class={ fmt.Sprintf("rounded-none btn mx-2 text-lg %s", activeAdmin) }>
                Shared
            </a>
        </div>
        <div class="flex-1 flex items-center justify-center">
        </div>
        <div class="flex-1 flex justify-end">
            if v.ViewType != "acls" {
                <button
                    hx-target={ string(fmt.Sprintf("#config-%s-%s-%s", v.ViewType, "all", v.YamlDefault.UUID)) }
                    hx-get={ string(templ.URL(fmt.Sprintf(paths.CookbookConfigAllPattern, v.ViewType, v.YamlDefault.UUID))) }
                    onclick={ eval(fmt.Sprintf("yaml_%s_modal.showModal()", "all")) }
                    hx-swap="textContent"
                    class="rounded-none btn btn-primary">
                    Compose
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                    </svg>
                </button>
            }
        </div>
    </div>
}

templ RenderCookbookHeader(v models.CoreView) {
    <div id="recipesnav" class="cookbooknav-attrs flex flex-col justify-end md:flex-row mx-12 mb-2">

        <div class="flex-1 flex items-center justify-start">
            <h1 class="text-2xl font-bold">Cookbook: { v.Cookbook.Name }</h1>
        </div>

        <div class="flex-1 flex justify-end">
            if v.ViewType != "acls" {
                <div class="dropdown dropdown-end">
                    <button tabindex="0" role="button" class="btn btn-primary rounded-none mx-2">
                        Actions
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5" />
                        </svg>
                    </button>

                    <ul tabindex="0" class="dropdown-content menu m-1 bg-base-100 rounded-none z-[1] w-52 p-2 shadow" style="z-index: 1000;">
                        <li>
                            <label class="flex items-center justify-between w-full px-4 py-2 rounded-none cursor-pointer">
                                <span class="label-text">Published</span>
                                <input
                                    id="published-toggle-dropdown"
                                    type="checkbox"
                                    class="toggle toggle-primary"
                                    hx-swap="none"
                                    hx-patch={string(templ.URL(fmt.Sprintf(paths.CookbookTogglePublishedPattern, v.YamlDefault.UUID)))}
                                    if v.Cookbook.IsPublished {
                                        checked="checked"
                                    }
                                />
                            </label>
                        </li>

                        <li>
                           <label class="flex items-center justify-between w-full px-4 py-2 rounded-none cursor-pointer">
                                <span class="label-text">Deleted</span>
                                <input
                                    id="deleted-toggle-dropdown"
                                    type="checkbox"
                                    class="toggle toggle-primary"
                                    hx-swap="none"
                                    hx-patch={string(templ.URL(fmt.Sprintf(paths.CookbookToggleDeletedPattern, v.YamlDefault.UUID)))}
                                    if v.Cookbook.IsDeleted {
                                        checked="checked"
                                    }
                                />
                            </label>
                        </li>
                        <li>
                            <button class="w-full px-4 py-2 flex items-center justify-between rounded-none" onclick="cookbook_description_modal.showModal()">
                                <span>Description</span>
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125" />
                                </svg>
                            </button>

                        </li>
                        <li>
                            <a
                                href={ templ.URL(fmt.Sprintf(paths.CookbookYamlDownloadPattern, v.ViewType, v.YamlDefault.UUID)) }
                                download={ string(fmt.Sprintf("%s-%s.yaml", v.YamlDefault.UUID, v.ViewType)) }
                                hx-disable
                                class="w-full px-4 py-2 flex items-center justify-between rounded-none">
                                <span>Download</span>
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m.75 12 3 3m0 0 3-3m-3 3v-6m-1.5-9H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
                                </svg>
                            </a>
                        </li>
                        <li>
                            <form
                                id="file-upload-form-dropdown"
                                data-uuid={ string(fmt.Sprintf("%s", v.YamlDefault.UUID)) }
                                data-type={ string(fmt.Sprintf("%s", v.ViewType)) }
                                class="w-full rounded-none flex items-center justify-center px-4 py-2">
                                <button class="w-full flex items-center justify-between rounded-none relative">
                                    <span>Upload</span>
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m6.75 12-3-3m0 0-3 3m3-3v6m-1.5-15H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
                                    </svg>
                                    <input id="yaml-file-upload-dropdown" name="file" type="file" class="absolute rounded-none top-0 left-0 w-full h-full opacity-0 cursor-pointer" />
                                </button>
                            </form>
                        </li>
                    </ul>
                    <span class="flex justify-center">
                        @CookbookDescription(v)
                    </span>
                </div>
            @uploadCookbookYamlScript(paths.CookbookYamlUploadPattern)
            }
        </div>
    </div>
    @renderYamlModal(v, "all")
}


templ RenderCookbookNav(v models.CoreView) {
<div id="cookbooknav" class="cookbooknav-attrs flex flex-col justify-end md:flex-row mx-12 mb-2">
    <div class="flex-1 flex items-center justify-start">
        <h1 class="text-2xl font-bold">Cookbook Edit</h1>
    </div>
    <div class="flex-1 flex items-center justify-center"></div>
    <div class="flex-1 flex justify-end">
        <div class="form-control">
        </div>
        <div class="form-control">
        </div>
    </div>
</div>
}


templ RenderAppNav(v models.CoreView) {
    <div id="cookbooknav" class="cookbooknav-attrs flex flex-col justify-end md:flex-row mx-12 mb-2">
        <div class="flex-1 flex items-center justify-start">
            <h1 class="text-2xl font-bold">App</h1>
        </div>
        <div class="flex-1 flex items-center justify-center">
        </div>
        <div class="flex-1 flex justify-end">
        </div>
    </div>
}


templ RenderYaml(v models.CoreView) {
    {{ yamlContent, _ := yaml.Marshal(v.YamlDefaultNoStorage) }}
     @templ.Raw(string(yamlContent))
}

templ AuthorIndex(v models.CoreView, cmp templ.Component) {
	@layout.Base(v.BaseView) {
		@cmp
	}
}