package partials

import ( 
    "strings"
    "fmt"
    "encoding/base64"    
    "github.com/jaredfolkins/letemcook/models"
    "github.com/jaredfolkins/letemcook/paths"
)

func replaceDashWithUnderscore(input string) string {
    input = strings.ReplaceAll(input, " ", "_")
    input = strings.ReplaceAll(input, "-", "_")
    return input
}

templ buildDynamicField(f models.FormField) {
    switch f.Type {
        case "text":
            @buildTextField(f)
        case "password":
            @buildTextField(f)
        case "radio":
            @buildRadioField(f)
        case "select":
            @buildSelectField(f)
        case "textarea":
            @buildTextareaField(f)
    }
}

script eval(msg string) {
    eval(msg);
}

templ buildSelectField(f models.FormField) {
    <select
    type={ f.Type }
    name={ replaceDashWithUnderscore(f.Name) }
    class="select select-bordered w-full max-w-xs bg-white rounded-none lemc-select-wrapper">
        <div class="form-control">
            <span class="label-text">{ f.Name }</span>
            for _, d := range f.Defaults {
                <option class="rounded-none">{ d }</option>
            }
        </div>
    </select>
}

templ buildRadioField(f models.FormField) {
    <div class="form-control">
        <div class="lemc-radio-wrapper">
            for i, d := range f.Defaults {
                <div class="flex">
                <label class="label cursor-pointer">
                        <div class="w-1/8 flex items-center lemc-radio">
                            <input
                                type={ f.Type }
                                name={ replaceDashWithUnderscore(f.Name) }
                                value={ d }
                                if i == 0 {
                                checked="checked"
                                }
                                class="radio "/>
                        </div>
                        <div class="w-7/8 flex items-center lemc-radio">
                            <span class="label-text">&nbsp;{ d }</span>
                        </div>
                </label>
                </div>
            }
        </div>
    </div>
}

templ buildTextField(f models.FormField) {
        <input
            type={ f.Type }
            name={ replaceDashWithUnderscore(f.Name) }
            if len(f.Defaults) == 1 {
                placeholder={ f.Defaults[0] }
            }
            class="input input-bordered bg-white input-primary rounded-none">
}

templ buildTextareaField(f models.FormField) {
        <textarea
            type={ f.Type }
            name={ replaceDashWithUnderscore(f.Name) }
            if len(f.Defaults) == 1 {
                placeholder={ f.Defaults[0] }
            }
            style="min-height: 220px;"
            class="input input-bordered bg-white input-primary rounded-none p-2">
        </textarea>
}

templ renderJobFormModal(v []models.FormField, view_page, view_type, uuid, oldname string, page_id int) {
      {{ name := replaceDashWithUnderscore(oldname) }}
      <dialog id={ string(fmt.Sprintf("job_form_page_%d_%s_modal", page_id, name)) } class="modal overscroll-none rounded-none">
          <div class="edit-box edges p-12 overscroll-none rounded-none">
                <button
                    onclick={ eval(string(fmt.Sprintf("job_form_page_%d_%s_modal.close()", page_id, name))) }
                    class="btn btn-sm btn-circle btn-ghost absolute left-2 rounded-none top-2">
                        âœ•
                </button>

                  <div class="h-full">
                      <div class="h-full">
                        <h1 class="card-title border-b border-b-slate-600 pb-[4px]">
                            { strings.Title(oldname) }
                        </h1>
                        <form
                            hx-swap="afterbegin"
                            hx-target="#toasty"
                            hx-put={ string(fmt.Sprintf(paths.GenericJobPattern, view_page, view_type, uuid, page_id, oldname)) }
                            class="drop-shadow-xl gap-4 p-2 rounded-none">
                            for _, f := range v {
                            <label class="gap-2 rounded-none">
                                <div class="p-2 form-control">
                                    <label class="label">
                                        { strings.Title(f.Name) }
                                    </label>
                                    @buildDynamicField(f)
                                </div>
                            </label>
                            }
                            <div class="card-actions justify-end">
                                <button
                                    onclick={ eval(fmt.Sprintf("job_form_page_%d_%s_modal.close()", page_id, name)) }
                                    class="rounded-none btn btn-primary mt-2 mb-2">
                                    Submit
                                </button>
                            </div>
                        </form>
                      </div>
                  </div>

          </div>
          <div class="toast-alerts"></div>
        </dialog>
}

templ printWiki(b64 string) {
    {{ html, _ := base64.StdEncoding.DecodeString(b64) }}
    @templ.Raw(string(html))
}
