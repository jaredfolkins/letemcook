package partials

import (
	"fmt"
	"github.com/jaredfolkins/letemcook/models"
)

templ Navbar(v models.BaseView) {
	<div class="fixed top-0 z-10 w-full">
	if v.Env == "development" {
			<div class="ribbon ribbon-top-right bg-red-500 text-white font-bold text-xs px-2 py-1 flex items-center justify-center">
				<span>development</span>
			</div>
		} else if v.Env == "test" {
			<div class="ribbon ribbon-top-right bg-orange-500 text-white font-bold text-xs px-2 py-1 flex items-center justify-center">
				<span>test</span>
			</div>
		}
		<nav class="navbar drop-shadow-xl bg-primary text-primary-content bg-lemc-navbar">
			<div class="navbar-start">
				<div class="flex items-center">
					<button hx-on:click="playSound()">
						<div id="logo" class="logo"></div>
					</button>
				</div>
			</div>
			<div
				id="navtop"
				hx-get={ string(fmt.Sprintf("/navtop?squid=%s&account=%s", v.AccountSquid, v.AccountName)) }
				hx-vals="js:{section: document.body.dataset.activeNav, subnav: document.body.dataset.activeSubNav}"
				hx-swap="innerHTML"
				hx-trigger="refreshNavtop from:body"
				class="navbar-end outlined-text"
			>
				@Navtop(v)
			</div>
			<script>

        </script>
		</nav>
		<progress id="upload-progress" class="w-full" style="display: none;" max="100" value="0"></progress>
	</div>
	<script>
        var isPlaying = false;
        var allHeckles = [];
        var playedHeckles = JSON.parse(localStorage.getItem('playedHeckles')) || [];
        var fadeTimers = new WeakMap();

       function swingAndFall(el) {
            var originalDisplay = el.style.display;
            el.classList.add('swing');
            el.addEventListener('animationend', function handler(e) {
                if (e.animationName === 'swing') {
                    el.classList.add('fall');
                } else if (e.animationName === 'fall') {
                    el.removeEventListener('animationend', handler);
                    el.classList.remove('swing', 'fall');
                    el.style.display = 'none';
                    setTimeout(function() {
                        el.style.display = originalDisplay;
                    }, 3000);
                }
            });
        }

        function computeMaxLife(el) {
            var rect = el.getBoundingClientRect();
            var area = rect.width * rect.height;
            var maxLife = Math.floor(1000 / Math.sqrt(area));
            if (maxLife < 1) { maxLife = 1; }
            if (maxLife > 20) { maxLife = 20; }
            return maxLife;
        }

        function createLifeBar(el, maxLife) {
            if (getComputedStyle(el).position === 'static') {
                el.style.position = 'relative';
            }
            var container = document.createElement('div');
            container.className = 'life-container';
            container.style.opacity = '1';
            var bar = document.createElement('div');
            bar.className = 'life-bar';
            container.appendChild(bar);
            el.appendChild(container);
            el.dataset.maxLife = maxLife;
            el.dataset.life = maxLife;
        }

        function updateLifeBar(el) {
            var bar = el.querySelector('.life-bar');
            if (!bar) { return; }
            var life = parseInt(el.dataset.life);
            var maxLife = parseInt(el.dataset.maxLife);
            var width = Math.max(0, (life / maxLife) * 100);
            bar.style.width = width + '%';
        }

        function scheduleFadeOut(el) {
            var container = el.querySelector('.life-container');
            if (!container) { return; }
            clearTimeout(fadeTimers.get(el));
            var timer = setTimeout(function() {
                container.style.opacity = '0';
                container.addEventListener('transitionend', function handler() {
                    container.removeEventListener('transitionend', handler);
                    container.remove();
                    delete el.dataset.maxLife;
                    delete el.dataset.life;
                    fadeTimers.delete(el);
                });
            }, 500);
            fadeTimers.set(el, timer);
        }

        function shootDiv(el) {
            if (!el.dataset.maxLife) {
                createLifeBar(el, computeMaxLife(el));
            }
            var container = el.querySelector('.life-container');
            if (container) {
                container.style.opacity = '1';
            }
            clearTimeout(fadeTimers.get(el));
            var life = parseInt(el.dataset.life);
            life -= 1;
            el.dataset.life = life;
            updateLifeBar(el);
            if (life <= 0) {
                if (container) { container.remove(); }
                swingAndFall(el);
                fadeTimers.delete(el);
                delete el.dataset.maxLife;
                delete el.dataset.life;
            } else {
                scheduleFadeOut(el);
            }
        }

        function fireGunEffect() {
            var divs = Array.from(document.querySelectorAll('div')).filter(function(d) {
                var rect = d.getBoundingClientRect();
                return rect.width > 0 && rect.height > 0 && d.offsetParent !== null;
            });
            if (divs.length === 0) { return; }
            var randomEl = divs[Math.floor(Math.random() * divs.length)];
            swingAndFall(randomEl);
        }

        async function heckle() {
                // Get current URL params
                const urlParams = new URLSearchParams(window.location.search);
                const squid = urlParams.get('squid');

                // Construct fetch URL
                let fetchUrl = '/heckle';
                if (squid) {
                    fetchUrl += '?squid=' + encodeURIComponent(squid);
                }

                // console.log('Heckle fetch URL:', fetchUrl); // Log the URL being fetched

                var response = await fetch(fetchUrl, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                switch(response.status) {
                    case 200:
                        var result = await response.json();
                        // console.log('Server response:', result); // Log the server response
                        if (!result.files || result.files.length === 0) {
                            console.log('No heckle files returned from server.');
                            return;
                        }
                        allHeckles = result.files;

                        let availableHeckles = allHeckles.filter(file => !playedHeckles.includes(file));

                        if (availableHeckles.length === 0) {
                            console.log('All heckles played, resetting.');
                            playedHeckles = [];
                            localStorage.setItem('playedHeckles', JSON.stringify(playedHeckles));
                            availableHeckles = allHeckles; // Use all heckles again
                        }

                        if (availableHeckles.length === 0) { // Should not happen if allHeckles is not empty
                            console.log('Still no available heckles after reset, something is wrong.');
                            return;
                        }

                        const randomIndex = Math.floor(Math.random() * availableHeckles.length);
                        const selectedHeckle = availableHeckles[randomIndex];

                        var audioPlayer = document.getElementById('audioPlayer');
                        if (!audioPlayer) {
                            console.error('Audio player element not found');
                            return;
                        }

                        if (isPlaying === false) {
                            isPlaying = true;
                            var logoElm = document.getElementById('logo');
                            logoElm.classList.add('shake');
                            var audioUrl = '/heckle/public/' + encodeURIComponent(selectedHeckle);
                            audioPlayer.src = audioUrl;
                            audioPlayer.play();
                            fireGunEffect();
                            playedHeckles.push(selectedHeckle);
                            localStorage.setItem('playedHeckles', JSON.stringify(playedHeckles));
                        }
                        break;
                    case 204:
                        console.log('204 No Content: Heckle likely disabled or no files found server-side.');
                        break;
                    default:
                        console.error('Unknown error fetching heckles');
                        break;
                }
                return;
        }


        function playSound() {
            heckle();
        }

        function stopSound() {
            if (isPlaying === true) {
                isPlaying = false;
                var logoElm = document.getElementById('logo');
                logoElm.classList.remove('shake');
                var audioPlayer = document.getElementById('audioPlayer');
                audioPlayer.pause();
                audioPlayer.currentTime = 0;
            }
        }


document.addEventListener("DOMContentLoaded", function() {
            document.getElementById('audioPlayer').addEventListener('ended', function() {
                stopSound();
            });
            document.addEventListener("click", function(event) {
                var targetDiv = event.target.closest('div');
                if (targetDiv && !targetDiv.classList.contains('life-container') && !targetDiv.classList.contains('life-bar')) {
                    shootDiv(targetDiv);
                }
                if (Math.random() <= 0.3) {
                    playSound();
                }
                console.log("A click event occurred!");
            });
        })



    </script>
	<style>
        @keyframes swing {
            0% { transform: rotate(0deg); }
            25% { transform: rotate(15deg); }
            50% { transform: rotate(-10deg); }
            75% { transform: rotate(5deg); }
            100% { transform: rotate(0deg); }
        }
        .swing {
            transform-origin: top center;
            animation: swing 0.5s forwards;
        }

        @keyframes fall {
            to { transform: translateY(100vh) rotate(20deg); opacity: 0; }
        }
        .fall {
            animation: fall 1s forwards;
        }
        .life-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: rgba(255,255,255,0.3);
            opacity: 1;
            transition: opacity 0.5s;
            pointer-events: none;
        }
        .life-bar {
            height: 100%;
            width: 100%;
            background: red;
            transition: width 0.2s;
        }
    </style>
}
