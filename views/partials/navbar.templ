package partials

import (
    "fmt"
    "github.com/jaredfolkins/letemcook/models"
    "github.com/jaredfolkins/letemcook/paths"
)


templ Navbar(v models.BaseView) {
	<div class="fixed top-0 z-10 w-full">

    if v.Env == "development" {
        <div class="ribbon ribbon-top-right bg-red-500 text-white font-bold text-xs px-2 py-1 flex items-center justify-center">
            <span>development</span>
        </div>
    } else if v.Env == "test" {
        <div class="ribbon ribbon-top-right bg-orange-500 text-white font-bold text-xs px-2 py-1 flex items-center justify-center">
            <span>test</span>
        </div>
    }

	<nav class="navbar drop-shadow-xl bg-primary text-primary-content bg-lemc-navbar">
		<div class="navbar-start">
		        <div class="flex items-center">
			        <button hx-on:click="playSound()">
                        <div id="logo" class="logo"></div>
			        </button>
		        </div>
		</div>

		<div
        id="navtop"
       hx-get={ string(fmt.Sprintf(paths.NavTopPattern, v.AccountSquid, v.AccountName)) }
        hx-vals="js:{section: document.body.dataset.activeNav, subnav: document.body.dataset.activeSubNav}"
        hx-swap="innerHTML"
        hx-trigger="refreshNavtop from:body"
		class="navbar-end outlined-text">
            @Navtop(v)
        </div>
        <script>

        </script>

	</nav>
	<progress id="upload-progress" class="w-full" style="display: none;" max="100" value="0"></progress>
    </div>

    <script>
        var isPlaying = false;
        var allHeckles = [];
        var playedHeckles = JSON.parse(localStorage.getItem('playedHeckles')) || [];

        async function heckle() {
                // Get current URL params
                const urlParams = new URLSearchParams(window.location.search);
                const squid = urlParams.get('squid');

                // Construct fetch URL
                let fetchUrl = "{{ paths.Heckle }}";
                if (squid) {
                    fetchUrl += '?squid=' + encodeURIComponent(squid);
                }

                // console.log('Heckle fetch URL:', fetchUrl); // Log the URL being fetched

                var response = await fetch(fetchUrl, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                switch(response.status) {
                    case 200:
                        var result = await response.json();
                        // console.log('Server response:', result); // Log the server response
                        if (!result.files || result.files.length === 0) {
                            console.log('No heckle files returned from server.');
                            return;
                        }
                        allHeckles = result.files;

                        let availableHeckles = allHeckles.filter(file => !playedHeckles.includes(file));

                        if (availableHeckles.length === 0) {
                            console.log('All heckles played, resetting.');
                            playedHeckles = [];
                            localStorage.setItem('playedHeckles', JSON.stringify(playedHeckles));
                            availableHeckles = allHeckles; // Use all heckles again
                        }

                        if (availableHeckles.length === 0) { // Should not happen if allHeckles is not empty
                            console.log('Still no available heckles after reset, something is wrong.');
                            return;
                        }

                        const randomIndex = Math.floor(Math.random() * availableHeckles.length);
                        const selectedHeckle = availableHeckles[randomIndex];

                        var audioPlayer = document.getElementById('audioPlayer');
                        if (!audioPlayer) {
                            console.error('Audio player element not found');
                            return;
                        }

                        if (isPlaying === false) {
                            isPlaying = true;
                            var logoElm = document.getElementById('logo');
                            logoElm.classList.add('shake');
                            var audioUrl = "{{ paths.HecklePublic }}" + '/' + encodeURIComponent(selectedHeckle);
                            audioPlayer.src = audioUrl;
                                audioPlayer.play();
                            playedHeckles.push(selectedHeckle);
                            localStorage.setItem('playedHeckles', JSON.stringify(playedHeckles));
                        }
                        break;
                    case 204:
                        console.log('204 No Content: Heckle likely disabled or no files found server-side.');
                        break;
                    default:
                        console.error('Unknown error fetching heckles');
                        break;
                }
                return;
        }


        function playSound() {
            heckle();
        }

        function stopSound() {
            if (isPlaying === true) {
                isPlaying = false;
                var logoElm = document.getElementById('logo');
                logoElm.classList.remove('shake');
                var audioPlayer = document.getElementById('audioPlayer');
                audioPlayer.pause();
                audioPlayer.currentTime = 0;
            }
        }


        document.addEventListener("DOMContentLoaded", function() {
            document.getElementById('audioPlayer').addEventListener('ended', function() {
                stopSound();
            });
            document.addEventListener("click", function(event) {
                if (Math.random() <= 0.3) {
                    playSound();
                };
               console.log("A click event occurred!");
            });
        })



    </script>
}
